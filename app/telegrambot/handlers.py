import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from aiogram import html, Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.services.news import fetch_news
from app.services.search import search_links
from app.services.chat import chat_service

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class SearchStates(StatesGroup):
    waiting_for_query = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —á–∞—Ç–∞
class ChatStates(StatesGroup):
    waiting_for_question = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='üîç –ü–æ–∏—Å–∫'), KeyboardButton(text='üì∞ –ù–æ–≤–æ—Å—Ç–∏')],
    [KeyboardButton(text='üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')]
], resize_keyboard=True)

@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}!\n"
        "–Ø –±–æ—Ç –ß–µ–ª–ì–£. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main
    )

@router.message(F.text == "üîç –ü–æ–∏—Å–∫")
async def search_button_handler(message: Message, state: FSMContext) -> None:
    await state.set_state(SearchStates.waiting_for_query)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–∞–π—Ç—É –ß–µ–ª–ì–£:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥')]],
            resize_keyboard=True
        )
    )

@router.message(SearchStates.waiting_for_query)
async def process_search_query(message: Message, state: FSMContext) -> None:
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main)
        return

    await state.clear()
    try:
        processing_msg = await message.answer("üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ –ß–µ–ª–ì–£...")
        
        search_results = search_links(message.text)
        
        await processing_msg.delete()
        
        if isinstance(search_results, dict) and "error" in search_results:
            await message.answer(
                f"‚ùå {search_results['error']}", 
                reply_markup=main
            )
            return
            
        if not search_results:
            await message.answer(
                "üîç –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–Ω–∞—á–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.",
                reply_markup=main
            )
            return
            
        response = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–∞ —Å–∞–π—Ç–µ –ß–µ–ª–ì–£:\n\n"
        for i, item in enumerate(search_results, 1):
            response += f"{i}. {item['title']}\n"
            if item['snippet']:
                response += f"{item['snippet']}\n"
            response += f"{item['link']}\n\n"
        
        await message.answer(response, reply_markup=main)
    except Exception as e:
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}", 
            reply_markup=main
        )

@router.message(F.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏")
async def news_button_handler(message: Message) -> None:
    try:
        news = fetch_news()
        if not news:
            await message.answer(
                "‚ùå –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", 
                reply_markup=main
            )
            return
            
        response = "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ß–µ–ª–ì–£:\n\n"
        for i, item in enumerate(news, 1):
            response += f"{i}. {item['title']}\n{item['url']}\n\n"
        
        await message.answer(response, reply_markup=main)
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}", 
            reply_markup=main
        )

@router.message(F.text == "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def chat_button_handler(message: Message, state: FSMContext) -> None:
    await state.set_state(ChatStates.waiting_for_question)
    await message.answer(
        "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ –ß–µ–ª–ì–£, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.\n"
        "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ '‚óÄÔ∏è –ù–∞–∑–∞–¥'",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥')]],
            resize_keyboard=True
        )
    )

@router.message(ChatStates.waiting_for_question)
async def process_question(message: Message, state: FSMContext) -> None:
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main)
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer("ü§î –û–±–¥—É–º—ã–≤–∞—é –æ—Ç–≤–µ—Ç...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
        response = chat_service.get_response(message.text)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await processing_msg.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await message.answer(response, reply_markup=main)
        await state.clear()
        
    except Exception as e:
        await message.answer(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å.",
            reply_markup=main
        )
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@router.message()
async def unknown_message(message: Message) -> None:
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=main
    ) 